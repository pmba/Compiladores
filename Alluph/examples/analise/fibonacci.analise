0001  "function void _fibonacci(int target) do"
          [0001, 0008] (0000,          catFunction) {function}
                    S = DefFunList 
           DefFunList = 'function' FunType FunId OpClPar 'do' SentList 'end' DefFunList 
          [0001, 0013] (0010,              catVoid) {void}
              FunType = 'void' 
          [0001, 0024] (0003,             catFunId) {_fibonacci}
                FunId = 'funId' 
          [0001, 0024] (0013,             catOpPar) {(}
              OpClPar = '(' Par ')' 
          [0001, 0028] (0005,               catInt) {int}
                  Par = ParAux 
               ParAux = VarType 'id' FunTypeAux Par 
              VarType = 'int' 
          [0001, 0035] (0016,                catId) {target}
          [0001, 0035] (0014,            catClsPar) {)}
           FunTypeAux = Epsilon
                  Par = Epsilon
          [0001, 0039] (0001,                catDo) {do}
0002  ""
0003  "    int a;"
          [0003, 0007] (0005,               catInt) {int}
             SentList = Sent SentListAux 
                 Sent = Decl ';' 
                 Decl = VarType Id 
              VarType = 'int' 
          [0003, 0009] (0016,                catId) {a}
                   Id = 'id' VecType 
          [0003, 0009] (0021,           catSemiCol) {;}
              VecType = Epsilon
0004  "    int b;"
          [0004, 0007] (0005,               catInt) {int}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Decl ';' 
                 Decl = VarType Id 
              VarType = 'int' 
          [0004, 0009] (0016,                catId) {b}
                   Id = 'id' VecType 
          [0004, 0009] (0021,           catSemiCol) {;}
              VecType = Epsilon
0005  "    int next;"
          [0005, 0007] (0005,               catInt) {int}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Decl ';' 
                 Decl = VarType Id 
              VarType = 'int' 
          [0005, 0012] (0016,                catId) {next}
                   Id = 'id' VecType 
          [0005, 0012] (0021,           catSemiCol) {;}
              VecType = Epsilon
0006  ""
0007  "    a = 1;"
          [0007, 0005] (0016,                catId) {a}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Atr ';' 
                  Atr = Id '=' Exp 
                   Id = 'id' VecType 
          [0007, 0006] (0024,            catOpeAtr) {=}
              VecType = Epsilon
          [0007, 0009] (0039,            catCteInt) {1}
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = 'CteInt' 
          [0007, 0009] (0021,           catSemiCol) {;}
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
0008  "    b = 1;"
          [0008, 0005] (0016,                catId) {b}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Atr ';' 
                  Atr = Id '=' Exp 
                   Id = 'id' VecType 
          [0008, 0006] (0024,            catOpeAtr) {=}
              VecType = Epsilon
          [0008, 0009] (0039,            catCteInt) {1}
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = 'CteInt' 
          [0008, 0009] (0021,           catSemiCol) {;}
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
0009  ""
0010  "    if target == 0 do "
          [0010, 0006] (0017,                catIf) {if}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = 'if' BoolExp 'do' SentList 'end' Else 
          [0010, 0013] (0016,                catId) {target}
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0010, 0014] (0032,             catOpeEq) {==}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = EqOpe RelExp 
                EqOpe = '==' 
          [0010, 0018] (0039,            catCteInt) {0}
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = 'CteInt' 
          [0010, 0021] (0001,                catDo) {do}
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
0011  "        return;"
          [0011, 0014] (0027,            catReturn) {return}
             SentList = Sent SentListAux 
                 Sent = Return ';' 
               Return = 'return' ReturnRec 
          [0011, 0014] (0021,           catSemiCol) {;}
            ReturnRec = Epsilon
0012  "    end"
          [0012, 0007] (0002,               catEnd) {end}
          SentListAux = Epsilon
0013  "    "
0014  "    while next <= target do"
          [0014, 0009] (0018,             catWhile) {while}
                 Else = Epsilon
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = 'while' BoolExp 'do' SentList 'end' 
          [0014, 0014] (0016,                catId) {next}
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0014, 0015] (0038,            catOpeLte) {<=}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = RelOpe RelExp RelExpRec 
               RelOpe = '<=' 
          [0014, 0024] (0016,                catId) {target}
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0014, 0027] (0001,                catDo) {do}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
0015  ""
0016  "        print(a ++ ", ");"
          [0016, 0013] (0025,             catPrint) {print}
             SentList = Sent SentListAux 
                 Sent = Print ';' 
                Print = 'print' '(' Exp ')' 
          [0016, 0013] (0013,             catOpPar) {(}
          [0016, 0015] (0016,                catId) {a}
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0016, 0016] (0028,           catOpeConc) {++}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = '++' BoolExp ExpRec 
          [0016, 0019] (0041,            catCteStr) {", "}
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = 'CteString' 
          [0016, 0023] (0014,            catClsPar) {)}
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
          [0016, 0024] (0021,           catSemiCol) {;}
0017  "        "
0018  "        next = a + b;"
          [0018, 0012] (0016,                catId) {next}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Atr ';' 
                  Atr = Id '=' Exp 
                   Id = 'id' VecType 
          [0018, 0013] (0024,            catOpeAtr) {=}
              VecType = Epsilon
          [0018, 0016] (0016,                catId) {a}
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0018, 0017] (0043,            catOpeSum) {+}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = ArOpe ArTerm ArExpRec 
                ArOpe = '+' 
          [0018, 0020] (0016,                catId) {b}
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0018, 0020] (0021,           catSemiCol) {;}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
0019  "        a = b;        "
          [0019, 0009] (0016,                catId) {a}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Atr ';' 
                  Atr = Id '=' Exp 
                   Id = 'id' VecType 
          [0019, 0010] (0024,            catOpeAtr) {=}
              VecType = Epsilon
          [0019, 0013] (0016,                catId) {b}
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0019, 0013] (0021,           catSemiCol) {;}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
0020  "        b = next;"
          [0020, 0009] (0016,                catId) {b}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Atr ';' 
                  Atr = Id '=' Exp 
                   Id = 'id' VecType 
          [0020, 0010] (0024,            catOpeAtr) {=}
              VecType = Epsilon
          [0020, 0016] (0016,                catId) {next}
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0020, 0016] (0021,           catSemiCol) {;}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
0021  ""
0022  "    end"
          [0022, 0007] (0002,               catEnd) {end}
          SentListAux = Epsilon
0023  ""
0024  "    print(a);"
          [0024, 0009] (0025,             catPrint) {print}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Print ';' 
                Print = 'print' '(' Exp ')' 
          [0024, 0009] (0013,             catOpPar) {(}
          [0024, 0011] (0016,                catId) {a}
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0024, 0011] (0014,            catClsPar) {)}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
          [0024, 0012] (0021,           catSemiCol) {;}
0025  "    "
0026  "    return;"
          [0026, 0010] (0027,            catReturn) {return}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Return ';' 
               Return = 'return' ReturnRec 
          [0026, 0010] (0021,           catSemiCol) {;}
            ReturnRec = Epsilon
0027  "end"
          [0027, 0003] (0002,               catEnd) {end}
          SentListAux = Epsilon
0028  ""
0029  "function int _main() do"
          [0029, 0008] (0000,          catFunction) {function}
           DefFunList = 'function' FunType FunId OpClPar 'do' SentList 'end' DefFunList 
          [0029, 0012] (0005,               catInt) {int}
              FunType = VarType FunTypeAux 
              VarType = 'int' 
          [0029, 0018] (0003,             catFunId) {_main}
           FunTypeAux = Epsilon
                FunId = 'funId' 
          [0029, 0018] (0013,             catOpPar) {(}
              OpClPar = '(' Par ')' 
          [0029, 0019] (0014,            catClsPar) {)}
                  Par = Epsilon
          [0029, 0023] (0001,                catDo) {do}
0030  ""
0031  "    int number;"
          [0031, 0007] (0005,               catInt) {int}
             SentList = Sent SentListAux 
                 Sent = Decl ';' 
                 Decl = VarType Id 
              VarType = 'int' 
          [0031, 0014] (0016,                catId) {number}
                   Id = 'id' VecType 
          [0031, 0014] (0021,           catSemiCol) {;}
              VecType = Epsilon
0032  "    int result;"
          [0032, 0007] (0005,               catInt) {int}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Decl ';' 
                 Decl = VarType Id 
              VarType = 'int' 
          [0032, 0014] (0016,                catId) {result}
                   Id = 'id' VecType 
          [0032, 0014] (0021,           catSemiCol) {;}
              VecType = Epsilon
0033  ""
0034  "    read(number);"
          [0034, 0008] (0026,              catRead) {read}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Read ';' 
                 Read = 'read' '(' Id Decl 
          [0034, 0008] (0013,             catOpPar) {(}
          [0034, 0015] (0016,                catId) {number}
                   Id = 'id' VecType 
          [0034, 0015] (0014,            catClsPar) {)}
              VecType = Epsilon
          [0034, 0016] (0021,           catSemiCol) {;}
0035  ""
0036  "    _fibonacci(number);"
          [0036, 0014] (0003,             catFunId) {_fibonacci}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = FunCall ';' 
              FunCall = 'funId' OpClPar 
          [0036, 0014] (0013,             catOpPar) {(}
              OpClPar = '(' Par ')' 
          [0036, 0021] (0016,                catId) {number}
                  Par = ParAux 
               ParAux = Exp Par 
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = Id 
                   Id = 'id' VecType 
          [0036, 0021] (0014,            catClsPar) {)}
              VecType = Epsilon
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
                  Par = Epsilon
          [0036, 0022] (0021,           catSemiCol) {;}
0037  ""
0038  "    return 0;"
          [0038, 0010] (0027,            catReturn) {return}
          SentListAux = SentList 
             SentList = Sent SentListAux 
                 Sent = Return ';' 
               Return = 'return' ReturnRec 
          [0038, 0012] (0039,            catCteInt) {0}
            ReturnRec = Exp 
                  Exp = BoolExp ExpRec 
              BoolExp = BoolTerm BoolExpRec 
             BoolTerm = BoolFac BoolTermRec 
              BoolFac = EqExp 
                EqExp = RelExp EqExpAux 
               RelExp = ArExp RelExpRec 
                ArExp = ArTerm ArExpRec 
               ArTerm = ArFac ArTermRec 
                ArFac = 'CteInt' 
          [0038, 0012] (0021,           catSemiCol) {;}
            ArTermRec = Epsilon
             ArExpRec = Epsilon
            RelExpRec = Epsilon
             EqExpAux = Epsilon
          BoolTermRec = Epsilon
           BoolExpRec = Epsilon
               ExpRec = Epsilon
0039  ""
0040  "end"
          [0040, 0003] (0002,               catEnd) {end}
          SentListAux = Epsilon
          [0040, 0005] (0048,               catEOF) {EOF}
           DefFunList = Epsilon

Accepted
