0001  "function int[] _shellSort(int nums[], int size) do"
          [0001, 0008] (0000,          catFunction) {function}
          [0001, 0012] (0004,               catInt) {int}
          [0001, 0012] (0020,            catOpBrac) {[}
          [0001, 0013] (0021,           catClsBrac) {]}
          [0001, 0025] (0042,             catFunId) {_shellSort}
          [0001, 0025] (0010,             catOpPar) {(}
          [0001, 0029] (0004,               catInt) {int}
          [0001, 0034] (0043,                catId) {nums}
          [0001, 0034] (0020,            catOpBrac) {[}
          [0001, 0035] (0021,           catClsBrac) {]}
          [0001, 0036] (0012,             catComma) {,}
          [0001, 0041] (0004,               catInt) {int}
          [0001, 0046] (0043,                catId) {size}
          [0001, 0046] (0011,            catClsPar) {)}
          [0001, 0050] (0001,                catDo) {do}
0002  "    int i;"
          [0002, 0007] (0004,               catInt) {int}
          [0002, 0009] (0043,                catId) {i}
          [0002, 0009] (0019,           catSemiCol) {;}
0003  "    int j;"
          [0003, 0007] (0004,               catInt) {int}
          [0003, 0009] (0043,                catId) {j}
          [0003, 0009] (0019,           catSemiCol) {;}
0004  "    int value;"
          [0004, 0007] (0004,               catInt) {int}
          [0004, 0013] (0043,                catId) {value}
          [0004, 0013] (0019,           catSemiCol) {;}
0005  "    int gap;"
          [0005, 0007] (0004,               catInt) {int}
          [0005, 0011] (0043,                catId) {gap}
          [0005, 0011] (0019,           catSemiCol) {;}
0006  "    "
0007  "    gap = 1;"
          [0007, 0007] (0043,                catId) {gap}
          [0007, 0008] (0030,             catOpeEq) {=}
          [0007, 0011] (0044,            catCteInt) {1}
          [0007, 0011] (0019,           catSemiCol) {;}
0008  "    while gap < size do"
          [0008, 0009] (0014,             catWhile) {while}
          [0008, 0013] (0043,                catId) {gap}
          [0008, 0014] (0035,             catOpeLt) {<}
          [0008, 0020] (0043,                catId) {size}
          [0008, 0023] (0001,                catDo) {do}
0009  "        gap = 3*gap+1;"
          [0009, 0011] (0043,                catId) {gap}
          [0009, 0012] (0030,             catOpeEq) {=}
          [0009, 0015] (0044,            catCteInt) {3}
          [0009, 0015] (0039,           catOpeMult) {*}
          [0009, 0019] (0043,                catId) {gap}
          [0009, 0019] (0037,            catOpeSum) {+}
          [0009, 0021] (0044,            catCteInt) {1}
          [0009, 0021] (0019,           catSemiCol) {;}
0010  "    end"
          [0010, 0007] (0002,               catEnd) {end}
0011  "    "
0012  "    while gap > 0 do"
          [0012, 0009] (0014,             catWhile) {while}
          [0012, 0013] (0043,                catId) {gap}
          [0012, 0014] (0033,             catOpeGt) {>}
          [0012, 0017] (0044,            catCteInt) {0}
          [0012, 0020] (0001,                catDo) {do}
0013  "    "
0014  "        from i = gap to size do"
          [0014, 0012] (0015,              catFrom) {from}
          [0014, 0014] (0043,                catId) {i}
          [0014, 0015] (0030,             catOpeEq) {=}
          [0014, 0020] (0043,                catId) {gap}
          [0014, 0023] (0016,                catTo) {to}
          [0014, 0028] (0043,                catId) {size}
          [0014, 0031] (0001,                catDo) {do}
0015  "        "
0016  "            value = nums[i];"
          [0016, 0017] (0043,                catId) {value}
          [0016, 0018] (0030,             catOpeEq) {=}
          [0016, 0024] (0043,                catId) {nums}
          [0016, 0024] (0020,            catOpBrac) {[}
          [0016, 0026] (0043,                catId) {i}
          [0016, 0026] (0021,           catClsBrac) {]}
          [0016, 0027] (0019,           catSemiCol) {;}
0017  "            j = i;"
          [0017, 0013] (0043,                catId) {j}
          [0017, 0014] (0030,             catOpeEq) {=}
          [0017, 0017] (0043,                catId) {i}
          [0017, 0017] (0019,           catSemiCol) {;}
0018  "            "
0019  "            while j > gap-1 and value <= nums[j-gap] do"
          [0019, 0017] (0014,             catWhile) {while}
          [0019, 0019] (0043,                catId) {j}
          [0019, 0020] (0033,             catOpeGt) {>}
          [0019, 0025] (0043,                catId) {gap}
          [0019, 0025] (0038,            catOpeSub) {-}
          [0019, 0027] (0044,            catCteInt) {1}
          [0019, 0031] (0027,            catOpeAnd) {and}
          [0019, 0037] (0043,                catId) {value}
          [0019, 0038] (0036,            catOpeLte) {<=}
          [0019, 0045] (0043,                catId) {nums}
          [0019, 0045] (0020,            catOpBrac) {[}
          [0019, 0047] (0043,                catId) {j}
          [0019, 0047] (0038,            catOpeSub) {-}
          [0019, 0051] (0043,                catId) {gap}
          [0019, 0051] (0021,           catClsBrac) {]}
          [0019, 0055] (0001,                catDo) {do}
0020  "            "
0021  "                nums[j] = nums[j-gap];"
          [0021, 0020] (0043,                catId) {nums}
          [0021, 0020] (0020,            catOpBrac) {[}
          [0021, 0022] (0043,                catId) {j}
          [0021, 0022] (0021,           catClsBrac) {]}
          [0021, 0024] (0030,             catOpeEq) {=}
          [0021, 0030] (0043,                catId) {nums}
          [0021, 0030] (0020,            catOpBrac) {[}
          [0021, 0032] (0043,                catId) {j}
          [0021, 0032] (0038,            catOpeSub) {-}
          [0021, 0036] (0043,                catId) {gap}
          [0021, 0036] (0021,           catClsBrac) {]}
          [0021, 0037] (0019,           catSemiCol) {;}
0022  "                j = j-gap;"
          [0022, 0017] (0043,                catId) {j}
          [0022, 0018] (0030,             catOpeEq) {=}
          [0022, 0021] (0043,                catId) {j}
          [0022, 0021] (0038,            catOpeSub) {-}
          [0022, 0025] (0043,                catId) {gap}
          [0022, 0025] (0019,           catSemiCol) {;}
0023  "                "
0024  "            end"
          [0024, 0015] (0002,               catEnd) {end}
0025  "            "
0026  "            nums[j] = value;"
          [0026, 0016] (0043,                catId) {nums}
          [0026, 0016] (0020,            catOpBrac) {[}
          [0026, 0018] (0043,                catId) {j}
          [0026, 0018] (0021,           catClsBrac) {]}
          [0026, 0020] (0030,             catOpeEq) {=}
          [0026, 0027] (0043,                catId) {value}
          [0026, 0027] (0019,           catSemiCol) {;}
0027  "            "
0028  "        end"
          [0028, 0011] (0002,               catEnd) {end}
0029  "        "
0030  "        gap = gap/3;"
          [0030, 0011] (0043,                catId) {gap}
          [0030, 0012] (0030,             catOpeEq) {=}
          [0030, 0017] (0043,                catId) {gap}
          [0030, 0017] (0040,            catOpeDiv) {/}
          [0030, 0019] (0044,            catCteInt) {3}
          [0030, 0019] (0019,           catSemiCol) {;}
0031  "        "
0032  "    end"
          [0032, 0007] (0002,               catEnd) {end}
0033  "    "
0034  "    return nums;"
          [0034, 0010] (0024,            carReturn) {return}
          [0034, 0015] (0043,                catId) {nums}
          [0034, 0015] (0019,           catSemiCol) {;}
0035  "end"
          [0035, 0003] (0002,               catEnd) {end}
0036  ""
0037  "function int main() do"
          [0037, 0008] (0000,          catFunction) {function}
          [0037, 0012] (0004,               catInt) {int}
          [0037, 0017] (0003,              catMain) {main}
          [0037, 0017] (0010,             catOpPar) {(}
          [0037, 0018] (0011,            catClsPar) {)}
          [0037, 0022] (0001,                catDo) {do}
0038  "    "
0039  "    int size;"
          [0039, 0007] (0004,               catInt) {int}
          [0039, 0012] (0043,                catId) {size}
          [0039, 0012] (0019,           catSemiCol) {;}
0040  "    int i;"
          [0040, 0007] (0004,               catInt) {int}
          [0040, 0009] (0043,                catId) {i}
          [0040, 0009] (0019,           catSemiCol) {;}
0041  "    "
0042  "    print("Insira a quantidade de números");"
          [0042, 0009] (0022,             catPrint) {print}
          [0042, 0009] (0010,             catOpPar) {(}
          [0042, 0010] (0046,            catCteStr) {"Insira a quantidade de números"}
          [0042, 0043] (0011,            catClsPar) {)}
          [0042, 0044] (0019,           catSemiCol) {;}
0043  "    read(size);"
          [0043, 0008] (0023,              catRead) {read}
          [0043, 0008] (0010,             catOpPar) {(}
          [0043, 0013] (0043,                catId) {size}
          [0043, 0013] (0011,            catClsPar) {)}
          [0043, 0014] (0019,           catSemiCol) {;}
0044  "    "
0045  "    int numbers[size];"
          [0045, 0007] (0004,               catInt) {int}
          [0045, 0015] (0043,                catId) {numbers}
          [0045, 0015] (0020,            catOpBrac) {[}
          [0045, 0020] (0043,                catId) {size}
          [0045, 0020] (0021,           catClsBrac) {]}
          [0045, 0021] (0019,           catSemiCol) {;}
0046  "    "
0047  "    print("Insira os numeros");"
          [0047, 0009] (0022,             catPrint) {print}
          [0047, 0009] (0010,             catOpPar) {(}
          [0047, 0010] (0046,            catCteStr) {"Insira os numeros"}
          [0047, 0029] (0011,            catClsPar) {)}
          [0047, 0030] (0019,           catSemiCol) {;}
0048  "    "
0049  "    from i = 0 to size do"
          [0049, 0008] (0015,              catFrom) {from}
          [0049, 0010] (0043,                catId) {i}
          [0049, 0011] (0030,             catOpeEq) {=}
          [0049, 0014] (0044,            catCteInt) {0}
          [0049, 0017] (0016,                catTo) {to}
          [0049, 0022] (0043,                catId) {size}
          [0049, 0025] (0001,                catDo) {do}
0050  "        read(numbers[i]);"
          [0050, 0012] (0023,              catRead) {read}
          [0050, 0012] (0010,             catOpPar) {(}
          [0050, 0020] (0043,                catId) {numbers}
          [0050, 0020] (0020,            catOpBrac) {[}
          [0050, 0022] (0043,                catId) {i}
          [0050, 0022] (0021,           catClsBrac) {]}
          [0050, 0023] (0011,            catClsPar) {)}
          [0050, 0024] (0019,           catSemiCol) {;}
0051  "    end"
          [0051, 0007] (0002,               catEnd) {end}
0052  "    "
0053  "    from i = 0 to size do"
          [0053, 0008] (0015,              catFrom) {from}
          [0053, 0010] (0043,                catId) {i}
          [0053, 0011] (0030,             catOpeEq) {=}
          [0053, 0014] (0044,            catCteInt) {0}
          [0053, 0017] (0016,                catTo) {to}
          [0053, 0022] (0043,                catId) {size}
          [0053, 0025] (0001,                catDo) {do}
0054  "        print(numbers[i]);"
          [0054, 0013] (0022,             catPrint) {print}
          [0054, 0013] (0010,             catOpPar) {(}
          [0054, 0021] (0043,                catId) {numbers}
          [0054, 0021] (0020,            catOpBrac) {[}
          [0054, 0023] (0043,                catId) {i}
          [0054, 0023] (0021,           catClsBrac) {]}
          [0054, 0024] (0011,            catClsPar) {)}
          [0054, 0025] (0019,           catSemiCol) {;}
0055  "    end"
          [0055, 0007] (0002,               catEnd) {end}
0056  "    "
0057  "    numbers = _shellSort(numbers, size);"
          [0057, 0011] (0043,                catId) {numbers}
          [0057, 0012] (0030,             catOpeEq) {=}
          [0057, 0024] (0042,             catFunId) {_shellSort}
          [0057, 0024] (0010,             catOpPar) {(}
          [0057, 0032] (0043,                catId) {numbers}
          [0057, 0032] (0012,             catComma) {,}
          [0057, 0038] (0043,                catId) {size}
          [0057, 0038] (0011,            catClsPar) {)}
          [0057, 0039] (0019,           catSemiCol) {;}
0058  "    "
0059  "    from i = 0 to size do"
          [0059, 0008] (0015,              catFrom) {from}
          [0059, 0010] (0043,                catId) {i}
          [0059, 0011] (0030,             catOpeEq) {=}
          [0059, 0014] (0044,            catCteInt) {0}
          [0059, 0017] (0016,                catTo) {to}
          [0059, 0022] (0043,                catId) {size}
          [0059, 0025] (0001,                catDo) {do}
0060  "        print(numbers[i]);"
          [0060, 0013] (0022,             catPrint) {print}
          [0060, 0013] (0010,             catOpPar) {(}
          [0060, 0021] (0043,                catId) {numbers}
          [0060, 0021] (0020,            catOpBrac) {[}
          [0060, 0023] (0043,                catId) {i}
          [0060, 0023] (0021,           catClsBrac) {]}
          [0060, 0024] (0011,            catClsPar) {)}
          [0060, 0025] (0019,           catSemiCol) {;}
0061  "    end"
          [0061, 0007] (0002,               catEnd) {end}
0062  ""
0063  "    return 0;"
          [0063, 0010] (0024,            carReturn) {return}
          [0063, 0012] (0044,            catCteInt) {0}
          [0063, 0012] (0019,           catSemiCol) {;}
0064  "end"
          [0064, 0003] (0002,               catEnd) {end}
          [0064, 0005] (0048,               catEOF) {EOF}
